#!/bin/bash

# Skript pro vyƒçi≈°tƒõn√≠ nepot≈ôebn√Ωch soubor≈Ø v projektu
# Vytvo≈ôen: 10. z√°≈ô√≠ 2025

echo "üßπ Zaƒç√≠n√°m ƒçi≈°tƒõn√≠ projektu..."
echo ""

# P≈ôesunut√≠ soubor≈Ø do backup adres√°≈ôe p≈ôed odstranƒõn√≠m
BACKUP_DIR="/workspaces/pavelfweb/_cleanup_backup_$(date +%Y%m%d%H%M%S)"
echo "üì¶ Vytv√°≈ôen√≠ z√°lohy v: $BACKUP_DIR"
mkdir -p "$BACKUP_DIR"

# Archivn√≠ a doƒçasn√© soubory
echo "üóÑÔ∏è  Archivov√°n√≠ archivn√≠ch soubor≈Ø..."
if [ -f "/workspaces/pavelfweb/pavelfweb2.rar" ]; then
  mv "/workspaces/pavelfweb/pavelfweb2.rar" "$BACKUP_DIR/"
  echo "  ‚úì P≈ôesunut pavelfweb2.rar"
fi

if [ -f "/workspaces/pavelfweb/pavelfweb2.zip" ]; then
  mv "/workspaces/pavelfweb/pavelfweb2.zip" "$BACKUP_DIR/"
  echo "  ‚úì P≈ôesunut pavelfweb2.zip"
fi

if [ -f "/workspaces/pavelfweb/app/app.zip" ]; then
  mv "/workspaces/pavelfweb/app/app.zip" "$BACKUP_DIR/"
  echo "  ‚úì P≈ôesunut app/app.zip"
fi

# Testovac√≠ soubory
echo "üß™ Archivov√°n√≠ testovac√≠ch skript≈Ø..."
for file in test-api.mjs test-auth.mjs test-db.mjs test-newsletter.sh test-unsubscribe.sh testLogin.mjs debug-db.mjs; do
  if [ -f "/workspaces/pavelfweb/$file" ]; then
    mkdir -p "$BACKUP_DIR/test_scripts"
    mv "/workspaces/pavelfweb/$file" "$BACKUP_DIR/test_scripts/"
    echo "  ‚úì P≈ôesunut $file"
  fi
done

# Doƒçasn√© soubory
echo "üìù Archivov√°n√≠ doƒçasn√Ωch soubor≈Ø..."
for file in cookies.txt login_response.json historiechatu.txt; do
  if [ -f "/workspaces/pavelfweb/$file" ]; then
    mkdir -p "$BACKUP_DIR/temp_files"
    mv "/workspaces/pavelfweb/$file" "$BACKUP_DIR/temp_files/"
    echo "  ‚úì P≈ôesunut $file"
  fi
done

# Pr√°zdn√© nebo nepot≈ôebn√© konfiguraƒçn√≠ soubory
echo "‚öôÔ∏è  Archivov√°n√≠ nepot≈ôebn√Ωch konfiguraƒçn√≠ch soubor≈Ø..."
if [ -f "/workspaces/pavelfweb/v0-user-next.config.mjs" ]; then
  mkdir -p "$BACKUP_DIR/config"
  mv "/workspaces/pavelfweb/v0-user-next.config.mjs" "$BACKUP_DIR/config/"
  echo "  ‚úì P≈ôesunut v0-user-next.config.mjs"
fi

# Z√°lohy komponent
echo "üß© Archivov√°n√≠ z√°lo≈æn√≠ch komponent..."
if [ -d "/workspaces/pavelfweb/components/backups" ]; then
  mkdir -p "$BACKUP_DIR/components"
  mv "/workspaces/pavelfweb/components/backups" "$BACKUP_DIR/components/"
  echo "  ‚úì P≈ôesunut adres√°≈ô components/backups"
fi

# Duplicitn√≠ dokumentace
echo "üìö Archivov√°n√≠ duplicitn√≠ dokumentace..."
docs=(
  "DATABASE_STANDARDIZACE.md"
  "DATABASE_STANDARDIZATION.md"
  "NEON_DB_STANDARDIZACE.md"
  "DB_STANDARDIZACE_ZPRAVA.md"
  "PROVEDENE_ZMENY_DB_STANDARDIZACE.md"
  "README_DB_STANDARDIZACE.md"
)

for doc in "${docs[@]}"; do
  if [ -f "/workspaces/pavelfweb/dokumentace/$doc" ]; then
    mkdir -p "$BACKUP_DIR/dokumentace"
    cp "/workspaces/pavelfweb/dokumentace/$doc" "$BACKUP_DIR/dokumentace/"
    echo "  ‚úì Z√°lohov√°n $doc"
  fi
done

# Vytvo≈ôit souhrnn√Ω dokument m√≠sto duplicitn√≠ch dokumentac√≠
echo "üìù Vytv√°≈ôen√≠ jednotn√©ho dokumentu pro DB standardizaci..."

cat > "/workspaces/pavelfweb/dokumentace/DATABASE_STANDARDIZATION.md" << EOL
# Standardizace datab√°ze

*Tento dokument nahrazuje nƒõkolik d≈ô√≠vƒõj≈°√≠ch dokument≈Ø o standardizaci datab√°ze, kter√© byly spojeny do jednoho.*

*Posledn√≠ aktualizace: $(date +"%d. %m. %Y")*

## Obsah
1. [√övod](#√∫vod)
2. [Standardy datab√°ze](#standardy-datab√°ze)
3. [Pou≈æit√≠ Neon Database](#pou≈æit√≠-neon-database)
4. [Drizzle ORM](#drizzle-orm)
5. [Proveden√© zmƒõny](#proveden√©-zmƒõny)

## √övod

Tento dokument popisuje standardy, kter√Ωmi se ≈ô√≠d√≠ pr√°ce s datab√°z√≠ v projektu. Dokument nahrazuje tyto p≈Øvodn√≠ dokumenty:
- DATABASE_STANDARDIZACE.md
- NEON_DB_STANDARDIZACE.md
- DB_STANDARDIZACE_ZPRAVA.md
- PROVEDENE_ZMENY_DB_STANDARDIZACE.md
- README_DB_STANDARDIZACE.md

## Standardy datab√°ze

### Obecn√© z√°sady
1. Pou≈æ√≠v√°me Neon Database (PostgreSQL)
2. Pro pr√°ci s datab√°z√≠ vyu≈æ√≠v√°me Drizzle ORM
3. V≈°echny datab√°zov√© sch√©mata jsou definov√°na v adres√°≈ôi \`/prisma\`
4. SQL skripty pro migrace jsou ulo≈æeny v adres√°≈ôi \`/database\`

### Konvence pojmenov√°n√≠
1. N√°zvy tabulek: mno≈æn√© ƒç√≠slo, snake_case (nap≈ô. \`users\`, \`articles\`)
2. N√°zvy sloupc≈Ø: snake_case (nap≈ô. \`first_name\`, \`created_at\`)
3. Prim√°rn√≠ kl√≠ƒçe: \`id\` (UUID nebo autoincrement integer)
4. Ciz√≠ kl√≠ƒçe: n√°zev odkazovan√© tabulky v jednotn√©m ƒç√≠sle + \`_id\` (nap≈ô. \`user_id\`)
5. ƒåasov√° raz√≠tka: \`created_at\`, \`updated_at\`

## Pou≈æit√≠ Neon Database

Pou≈æ√≠v√°me Neon Database pro serverless PostgreSQL. Pro p≈ôipojen√≠ pou≈æ√≠v√°me \`@neondatabase/serverless\` klienta.

P≈ô√≠klad pou≈æit√≠:
\`\`\`javascript
import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';

const sql = neon(process.env.DATABASE_URL);
const db = drizzle(sql);
\`\`\`

## Drizzle ORM

Pro pr√°ci s datab√°z√≠ pou≈æ√≠v√°me Drizzle ORM, kter√Ω nab√≠z√≠ typovƒõ bezpeƒçn√Ω p≈ô√≠stup k datab√°zi.

P≈ô√≠klad definice sch√©matu:
\`\`\`typescript
import { pgTable, uuid, text, timestamp } from 'drizzle-orm/pg-core';

export const users = pgTable('users', {
  id: uuid('id').primaryKey().defaultRandom(),
  name: text('name').notNull(),
  email: text('email').notNull().unique(),
  createdAt: timestamp('created_at').defaultNow().notNull()
});
\`\`\`

## Proveden√© zmƒõny

### Standardizace pou≈æ√≠v√°n√≠ API pro p≈ôipojen√≠
- Odstranƒõny r≈Øzn√© zp≈Øsoby p≈ôipojen√≠ k datab√°zi
- Zaveden jednotn√Ω p≈ô√≠stup p≈ôes \`@neondatabase/serverless\`

### Migrace z deprecated knihoven
- Odstranƒõna z√°vislost na standardn√≠m \`pg\` klientovi
- Implementov√°na podpora pro serverless prost≈ôed√≠

### Dal≈°√≠ √∫pravy
- Odstranƒõny duplicitn√≠ testovac√≠ skripty
- Sjednoceny n√°zvy tabulek a sloupc≈Ø podle konvenc√≠
- Vytvo≈ôeny indexy pro optimalizaci dotaz≈Ø

---
*Pro v√≠ce informac√≠ kontaktujte v√Ωvojov√Ω t√Ωm.*
EOL

# Odstranƒõn√≠ duplicitn√≠ch dokument≈Ø o DB standardizaci
for doc in "${docs[@]}"; do
  if [ "$doc" != "DATABASE_STANDARDIZATION.md" ] && [ -f "/workspaces/pavelfweb/dokumentace/$doc" ]; then
    rm "/workspaces/pavelfweb/dokumentace/$doc"
    echo "  ‚úì Odstranƒõn duplicitn√≠ dokument $doc"
  fi
done

echo ""
echo "üéâ ƒåi≈°tƒõn√≠ projektu bylo dokonƒçeno!"
echo "üîç Z√°lo≈æn√≠ soubory najdete v adres√°≈ôi: $BACKUP_DIR"
echo "üìã Podrobn√Ω seznam vyƒçi≈°tƒõn√Ωch soubor≈Ø byl ulo≈æen v cleanup-list.txt"
echo ""
echo "Shrnut√≠ operac√≠:"
echo "--------------------------------"
echo "üóÇÔ∏è  Duplicitn√≠ dokumentace byla slouƒçena do jednoho dokumentu: DATABASE_STANDARDIZATION.md"
echo "üóÑÔ∏è  Archivn√≠ a doƒçasn√© soubory byly p≈ôesunuty do z√°lohy"
echo "üß™ Testovac√≠ skripty byly p≈ôesunuty do z√°lohy"
echo "üß© Duplicitn√≠ komponenty byly p≈ôesunuty do z√°lohy"

# P≈ôid√°n√≠ ≈ô√°dku do .gitignore pro z√°lo≈æn√≠ adres√°≈ôe
if [ -f "/workspaces/pavelfweb/.gitignore" ]; then
  if ! grep -q "_cleanup_backup_" "/workspaces/pavelfweb/.gitignore"; then
    echo "" >> "/workspaces/pavelfweb/.gitignore"
    echo "# Z√°lo≈æn√≠ adres√°≈ôe z ƒçi≈°tƒõn√≠ projektu" >> "/workspaces/pavelfweb/.gitignore"
    echo "_cleanup_backup_*/" >> "/workspaces/pavelfweb/.gitignore"
    echo "‚úì P≈ôid√°n z√°znam do .gitignore pro ignorov√°n√≠ z√°lo≈æn√≠ch adres√°≈ô≈Ø"
  fi
fi
