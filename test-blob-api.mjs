// Test nov√©ho VERCEL_BLOB_API tokenu
console.log('üß™ Testov√°n√≠ VERCEL_BLOB_API...\n');

// Environment check
console.log('üìã Environment promƒõnn√©:');
console.log('NODE_ENV:', process.env.NODE_ENV || 'development');
console.log('VERCEL_BLOB_API:', process.env.VERCEL_BLOB_API ? '‚úÖ nastaven' : '‚ùå chyb√≠');

// Test @vercel/blob import
try {
  const { put, list, del } = await import('@vercel/blob');
  console.log('‚úÖ @vercel/blob import √∫spƒõ≈°n√Ω');
  
  if (process.env.VERCEL_BLOB_API) {
    console.log('\nüîç Testov√°n√≠ Blob API p≈ôipojen√≠...');
    
    try {
      // Test list operace (nedestruktivn√≠)
      const { blobs } = await list({ 
        token: process.env.VERCEL_BLOB_API,
        limit: 1 
      });
      
      console.log('‚úÖ Blob API funguje!');
      console.log(`üìÅ Nalezeno blob≈Ø: ${blobs.length}`);
      
      if (blobs.length > 0) {
        console.log(`üìÑ P≈ô√≠klad blob: ${blobs[0].pathname}`);
      }
      
    } catch (error) {
      console.log('‚ùå Blob API selhalo:', error.message);
    }
  }
  
} catch (error) {
  console.log('‚ùå @vercel/blob import selh√°n√≠:', error.message);
}

console.log('\nüéØ Stav integrace:');
console.log('‚Ä¢ Development: VERCEL_BLOB_API token nastaven');
console.log('‚Ä¢ Production: P≈ôipraveno pro nasazen√≠');
console.log('‚Ä¢ Media upload: Bude pou≈æ√≠vat Blob Storage');
console.log('‚Ä¢ Fallback: Lok√°ln√≠ storage v dev m√≥du');